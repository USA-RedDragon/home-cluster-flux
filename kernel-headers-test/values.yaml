# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ubuntu
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "22.04"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

command:
- /bin/bash
- -c
- sleep infinity

initContainers:
- name: headers
  image: ubuntu:22.04
  imagePullPolicy: IfNotPresent
  volumeMounts:
    - mountPath: /headers
      name: headers
  command:
  - /bin/bash
  - -c
  - |
    set -euo pipefail
    HEADERS_DESTINATION=${HEADERS_DESTINATION:-/headers}
    DEBIAN_FRONTEND=noninteractive apt update
    DEBIAN_FRONTEND=noninteractive apt install -y git build-essential rsync
    KERNEL_VERSION=$(uname -r | awk -F- '{ print $1 }')
    # If /tmp/linux doesn't exist, clone the kernel repo
    [ -d /tmp/linux ] || git clone -b v${KERNEL_VERSION} --depth 1 git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git /tmp/linux
    cd /tmp/linux
    zcat /proc/config.gz > .config
    make mrproper
    make headers_install INSTALL_HDR_PATH=${HEADERS_DESTINATION}
    cd -
    rm -rf /tmp/linux

secrets: []
# - name: app-creds
#   data:
#     API_KEY: 'asdfgh123456'
#     SMTP_PASSWORD: '123456asdfgh'
# - name: app-secret-key
#   data:
#     SECRET_KEY: ashdfsfa
# - name: app-keyfile
#   data:
#     keyfile.txt: |
#       using
#       multiline
#       strings

configs: []
# - name: app-config
#   data:
#     TEST_ENV: alive
# - name: app-otherenv
#   data:
#     SPECIAL_KEY: here
# - name: app-configfile
#   data:
#     test.ini: |
#       [test]
#       value=1

envFrom: []
# - configMapRef:
#     name: app-config

env: []

podAnnotations:
  backup.velero.io/backup-volumes-excludes: headers

podSecurityContext: {}
  # fsGroup: 999

securityContext:
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 999
  # runAsGroup: 999
  # fsGroup: 999

service:
  type: ClusterIP

persistentVolumes:
- name: headers
  mountPath: /headers
  size: 1Gi
  persistentVolumeClaim:
    name: headers
    storageClass: mayastor-nvme

ingress:
  enabled: false

probes: {}

resources:
  limits:
    memory: 500Mi
  requests:
    cpu: 1
    memory: 250Mi

nodeSelector: {}

tolerations: []

affinity: {}

lifecycle: {}
  # postStart:
  #   exec:
  #     command:
  #       - /bin/sh
  #       - -c
  #       - cp /tmp/file /var/app/file
