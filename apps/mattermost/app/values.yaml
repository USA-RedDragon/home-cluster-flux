global:
  siteUrl: "https://mattermost.mcswain.dev"
  # Use an existing secret for License credential (see secret-mattermost-license.yaml for required fields)
  existingLicenseSecret:
    name: mattermost
    key: license
  enableTeamCreation: true
  enableUserCreation: true
  enableOpenServer: true
  enableLinkPreviews: true
  enableCustomEmoji: true

  # Settings to enable email notifications
  sendEmailNotifications: true
  requireEmailVerification: true
  feedbackName: "Mattermost"
  feedbackEmail: "mattermost@mcswain.dev"
  feedbackOrganization: "McSwain"

  features:
    database:
      # If using an internal DB, update the passwords in the "mysqlha" section
      # If using an external DB, disable the MySQL deployment in the "mysqlha" section
      useInternal: false
      existingDatabaseSecret:
        name: mattermost
        key: pgurl
    elasticsearch:
      enabled: false
    grafana:
      enabled: false
    jobserver:
      name: jobserver
      enabled: false
      replicaCount: 1
      strategy:
        type: Recreate
        rollingUpdate: null
      revisionHistoryLimit: 2
      service:
        name: mattermost-app-jobserver
        type: ClusterIP
      resources:
        limits:
          cpu: 100m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 200Mi
    notifications:
      # Push proxy must be configured or useHPNS must be true for push noticiations to work.
      push:
        enabled: true
        # Hosted push notification service. Requires an enterprise license.
        # More details at https://docs.mattermost.com/mobile/mobile-hpns.html.
        useHPNS: true

initContainerImage:
  repository: appropriate/curl
  tag: latest
  imagePullPolicy: IfNotPresent

# Mattermost deployment section.
# Use to configure the deploymento the Mattermost app servers.
mattermostApp:
  replicaCount: 1
  image:
    repository: ghcr.io/usa-reddragon/mattermost
    tag: v9.11.0@sha256:343bd9afd1c9dcd554c01759a18ffe9996982cc335c0656a461c3d70b1c517f9
    pullPolicy: IfNotPresent

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  revisionHistoryLimit: 2

  service:
    name: mattermost-app
    type: ClusterIP
    externalPort: 8065
    internalPort: 8065
    metricsPort: 8067
    clusterPort: 8075
    gossipPort: 8074
    metricsName: mattermost-app-metrics

  ingress:
    # Used to create Ingress record (should be used with service.type: ClusterIP).
    enabled: true
    hosts:
      - mattermost.mcswain.dev
    tls:
      # Secrets must be manually created in the namespace.
      - secretName: mattermost-mcswain-dev-tls
        hosts:
          - mattermost.mcswain.dev
    annotations:
      kubernetes.io/ingress.class: nginx
      cert-manager.io/cluster-issuer: cloudflare
      nginx.ingress.kubernetes.io/proxy-buffering: "on"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
      nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_cache_revalidate on;
        proxy_cache_min_uses 2;
        proxy_cache_use_stale timeout;
        proxy_cache_lock on;
    ingressClassName: nginx

  ## Pod Security Context
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext:
    # fsGroup: 2000
    # runAsGroup: 2000
    # runAsUser: 2000

  resources:
    requests:
      cpu: 100m
      memory: 300Mi

  extraInitContainers: []
    # Extra Container to donwload and install plugins
    # - name: init-plugins-config
    #   image: busybox
    #   imagePullPolicy: IfNotPresent
    #   command:
    #     - sh
    #     - "-c"
    #     - |
    #       PLUGINS_TAR="hovercardexample.tar.gz"
    #       PLUGINS_TAR="${PLUGINS_TAR} https://<YOUR_PATH_TO_DOWNLOAD_PLUGINS_1>"
    #       PLUGINS_TAR="${PLUGINS_TAR} https://<YOUR_PATH_TO_DOWNLOAD_PLUGINS_2>"
    #       PLUGINS_TAR="${PLUGINS_TAR} https://<YOUR_PATH_TO_DOWNLOAD_PLUGINS_N>"

    #       for plugin_tar in ${PLUGINS_TAR};
    #       do
    #         wget ${plugin_tar} -P /mattermost/plugins
    #         cd /mattermost/plugins
    #         tar -xzvf ${plugin_tar##*/}
    #         rm -f ${plugin_tar##*/}
    #       done
    #   volumeMounts:
    #   # Need to match the volume mount for plugins volumes
    #   - name: mattermost-plugins
    #     mountPath: /mattermost/plugins/
    #   - name: mattermost-plugins-client
    #     mountPath: /mattermost/client/plugins/
    #   Add the extra volumes you might want to use here. Use the values you define in the extraVolumeMounts

  extraEnv:
    - name: MM_EMAILSETTINGS_SMTPPASSWORD
      valueFrom:
        secretKeyRef:
          name: mattermost
          key: smtp_password
    - name: MM_EMAILSETTINGS_SMTPSERVER
      value: "email.mcswain.dev"
    - name: MM_EMAILSETTINGS_SMTPPORT
      value: "465"
    - name: MM_EMAILSETTINGS_SMTPUSERNAME
      value: "mattermost"
    - name: MM_EMAILSETTINGS_ENABLESMTPAUTH
      value: "true"
    - name: MM_EMAILSETTINGS_CONNECTIONSECURITY
      value: "TLS"
    - name: MM_CLUSTERSETTINGS_ENABLE
      value: "false"
    - name: MM_CLUSTERSETTINGS_CLUSTERNAME
      value: "mattermost"
    - name: MM_CLUSTERSETTINGS_USEIPADDRESS
      value: "true"
    - name: MM_SERVICESETTINGS_WEBSOCKETURL
      value: "wss://mattermost.mcswain.dev"
    - name: MM_SERVICESETTINGS_ENABLEEMAILINVITATIONS
      value: "true"
    - name: MM_SERVICESETTINGS_ALLOWCORSFROM
      value: "*"
    - name: MM_FILESETTINGS_EXTRACTCONTENT
      value: "false"
    - name: MM_LOGSETTINGS_ENABLEFILE
      value: "false"
    - name: MM_EMAILSETTINGS_ENABLESIGNUPWITHEMAIL
      value: "false"
    - name: MM_EMAILSETTINGS_REQUIREEMAILVERIFICATION
      value: "true"
    - name: MM_EMAILSETTINGS_ENABLESIGNINWITHEMAIL
      value: "true"
    - name: MM_EMAILSETTINGS_ENABLESIGNINWITHUSERNAME
      value: "true"
    - name: MM_OPENIDSETTINGS_ENABLE
      value: "true"
    - name: MM_CLUSTERSETTINGS_READONLYCONFIG
      value: "true"
    - name: MM_PLUGINSETTINGS_REQUIREPLUGINSIGNATURE
      value: "true"
    - name: MM_PLUGINSETTINGS_ENABLEMARKETPLACE
      value: "false"
    - name: MM_PLUGINSETTINGS_ENABLEREMOTEMARKETPLACE
      value: "false"
    - name: MM_SUPPORTSETTINGS_PRIVACYPOLICYLINK
      value: ""
    - name: MM_SUPPORTSETTINGS_FORGETPASSWORDCUSTOMLINK
      value: ""
    - name: MM_NATIVEAPPSETTINGS_APPDOWNLOADLINK
      value: ""
    - name: MM_NATIVEAPPSETTINGS_ANDROIDAPPDOWNLOADLINK
      value: ""
    - name: MM_NATIVEAPPSETTINGS_IOSAPPDOWNLOADLINK
      value: ""
    - name: MM_CLUSTERSETTINGS_ENABLEEXPERIMENTALGOSSIPENCRYPTION
      value: "true"
    - name: MM_OPENIDSETTINGS_BUTTONTEXT
      value: "Sign in with Authentik"
    - name: MM_OPENIDSETTINGS_DISCOVERYENDPOINT
      value: "https://authentik.mcswain.dev/application/o/mattermost/.well-known/openid-configuration"
    - name: MM_OPENIDSETTINGS_ID
      valueFrom:
        secretKeyRef:
          name: mattermost
          key: openid_id
    - name: MM_OPENIDSETTINGS_SECRET
      valueFrom:
        secretKeyRef:
          name: mattermost
          key: openid_secret
    - name: MM_EMAILSETTINGS_FEEDBACKNAME
      value: "Mattermost"
    - name: MM_EMAILSETTINGS_FEEDBACKEMAIL
      value: mattermost@mcswain.dev
    - name: MM_SUPPORTSETTINGS_SUPPORTEMAIL
      value: mattermost@mcswain.dev
    - name: MM_EMAILSETTINGS_REPLYTOADDRESS
      value: mattermost@mcswain.dev
    - name: MM_SUPPORTSETTINGS_ENABLEASKCOMMUNITYLINK
      value: "false"
    - name: MM_SUPPORTSETTINGS_HELPLINK
      value: ""
    - name: MM_SUPPORTSETTINGS_ABOUTLINK
      value: ""
    - name: MM_SUPPORTSETTINGS_REPORTAPROBLEMLINK
      value: ""
    - name: MM_PRIVACYSETTINGS_SHOWEMAILADDRESS
      value: "false"
    - name: MM_LICENSE
      valueFrom:
        secretKeyRef:
          name: mattermost
          key: license
    - name: MM_LOGSETTINGS_ENABLEDIAGNOSTICS
      value: "false"
    - name: MM_SERVICESETTINGS_ENABLESECURITYFIXALERT
      value: "false"
    - name: MM_CLOUDSETTINGS_DISABLE
      value: "true"
    - name: MM_EMAILSETTINGS_PUSHNOTIFICATIONCONTENTS
      value: "id_loaded"
    - name: MM_EMAILSETTINGS_SENDPUSHNOTIFICATIONS
      value: "true"
    - name: MM_EMAILSETTINGS_PUSHNOTIFICATIONSERVER
      value: "http://push-proxy-app:8066"
    - name: MM_FILESETTINGS_DRIVERNAME
      value: "amazons3"
    - name: MM_FILESETTINGS_AMAZONS3BUCKET
      value: "mattermost"
    - name: MM_FILESETTINGS_AMAZONS3ENDPOINT
      value: "s3.mcswain.dev"
    - name: MM_FILESETTINGS_AMAZONS3SIGNV2
      value: "true"
    - name: MM_FILESETTINGS_AMAZONS3ACCESSKEYID
      valueFrom:
        secretKeyRef:
          name: mattermost
          key: minio-access-key
    - name: MM_FILESETTINGS_AMAZONS3SECRETACCESSKEY
      valueFrom:
        secretKeyRef:
          name: mattermost
          key: minio-secret-key
    - name: MM_FILESETTINGS_MAXFILESIZE
      value: "10737418240" # 10gb
    - name: MM_SERVICESETTINGS_READTIMEOUT
      value: "1200"
    - name: MM_SERVICESETTINGS_WRITETIMEOUT
      value: "1200"
    - name: MM_SERVICESETTINGS_IDLETIMEOUT
      value: "1200"
    - name: MM_FILESETTINGS_AMAZONS3REQUESTTIMEOUTMILLISECONDS
      value: "1200000"
    - name: MM_SERVICESETTINGS_ENABLELOCALMODE
      value: "true"

mysqlha:
  enabled: false

minio:
  enabled: false

prometheus:
  install: false

serviceAccount:
  create: false
  name:
  annotations: {}
