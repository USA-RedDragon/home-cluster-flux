# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: vaultwarden/server
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "1.30.1@sha256:ab9fe547277245533a28d8e0a0c4a1e1120daf469f983fd683fc13556927d4fe"

imagePullSecrets:
- name: registry-docker-hub
nameOverride: ""
fullnameOverride: ""

command:
- /bin/sh
- -c
- |
  export DATABASE_URL="postgresql://${DB_USER}:${DB_PASSWORD}@cluster.postgres.svc.cluster.local/vaultwarden?sslmode=require" && \
  exec /start.sh

secrets: []
# - name: app-secret-key
#   data:
#     SECRET_KEY: ashdfsfa
# - name: app-keyfile
#   data:
#     keyfile.txt: |
#       using
#       multiline
#       strings

configs: []
# - name: app-config
#   data:
#     TEST_ENV: alive
# - name: app-otherenv
#   data:
#     SPECIAL_KEY: here
# - name: app-configfile
#   data:
#     test.ini: |
#       [test]
#       value=1

envFrom:
- secretRef:
    name: vaultwarden-creds
# - configMapRef:
#     name: app-config

env:
- name: SIGNUPS_ALLOWED
  value: 'false'
- name: WEBSOCKET_ENABLED
  value: 'true'
- name: DOMAIN
  value: https://bitwarden.mcswain.dev
- name: PUSH_ENABLED
  value: 'true'
- name: SMTP_SECURITY
  value: force_tls
- name: SMTP_HOST
  value: email.mcswain.dev
- name: SMTP_PORT
  value: '465'
- name: SMTP_USERNAME
  value: vaultwarden
- name: SIGNUPS_VERIFY
  value: 'true'
- name: PASSWORD_ITERATIONS
  value: '600001'
- name: SMTP_FROM
  value: bitwarden@mcswain.dev
- name: SMTP_FROM_NAME
  value: Bitwarden
- name: REQUIRE_DEVICE_EMAIL
  value: 'false'
- name: DB_PASSWORD
  valueFrom:
    secretKeyRef:
      name: vaultwarden.vaultwarden.cluster.credentials.postgresql.acid.zalan.do
      key: password
- name: DB_USER
  valueFrom:
    secretKeyRef:
      name: vaultwarden.vaultwarden.cluster.credentials.postgresql.acid.zalan.do
      key: username
# - name: SPECIAL_KEY
#   valueFrom:
#     configMapKeyRef:
#       name: app-otherenv
#       key: SPECIAL_KEY

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
  - name: http
    port: 80
  - name: websockets
    port: 3012

persistentVolumes:
- name: data
  mountPath: /data
  size: 8Gi
  persistentVolumeClaim:
    name: data
    storageClass: mayastor-nvme
# - name: config
#   mountPath: /config
#   configMap:
#     name: app-configfile
#     items:
#     - key: test.ini
#       path: config.ini
# - name: keys
#   mountPath: /keys
#   readOnly: true
#   secret:
#     secretName: app-keyfile

ingress:
  enabled: true
  annotations:
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: cloudflare
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/configuration-snippet: |
    #   proxy_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
    #   grpc_set_header l5d-dst-override $service_name.$namespace.svc.cluster.local:$service_port;
  ingressClassName: nginx
  hosts:
  - host: bitwarden.mcswain.dev
    paths:
    - port: 80
      path: /
      pathType: Prefix
    - port: 3012
      path: /notifications/hub
      pathType: Exact
  tls:
  - secretName: bitwarden-mcswain-dev-tls
    hosts:
      - bitwarden.mcswain.dev

probes:
  liveness:
    httpGet:
      path: /alive
      port: 80
  readiness:
    httpGet:
      path: /alive
      port: 80

resources:
  limits:
    memory: 128Mi
  requests:
    memory: 70Mi

nodeSelector: {}

tolerations: []

affinity: {}

lifecycle: {}
  # postStart:
  #   exec:
  #     command:
  #       - /bin/sh
  #       - -c
  #       - cp /tmp/file /var/app/file
