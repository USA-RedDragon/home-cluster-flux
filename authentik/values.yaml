# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io/goauthentik/server
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "2023.8.3@sha256:ffa8559564c3d11c549d385ee231a4ce8dfa92abb37f50ce9df26105f023a077"

imagePullSecrets:
- name: registry-ghcr
nameOverride: ""
fullnameOverride: ""

args:
- server

secrets: []
# - name: app-secret-key
#   data:
#     SECRET_KEY: ashdfsfa
# - name: app-keyfile
#   data:
#     keyfile.txt: |
#       using
#       multiline
#       strings

configs:
- name: authentik-config
  data:
    AUTHENTIK_REDIS__HOST: redis-app.authentik.svc.cluster.local
    AUTHENTIK_POSTGRESQL__HOST: postgres-app.postgres.svc.cluster.local
    AUTHENTIK_POSTGRESQL__USER: authentik
    AUTHENTIK_POSTGRESQL__NAME: authentik
    AUTHENTIK_EMAIL__HOST: email.mcswain.dev
    AUTHENTIK_EMAIL__PORT: '465'
    AUTHENTIK_EMAIL__USER: authentik
    AUTHENTIK_EMAIL__USE_TLS: "false"
    AUTHENTIK_EMAIL__USE_SSL: "true"
    AUTHENTIK_EMAIL__FROM: authentik@mcswain.dev
# - name: app-otherenv
#   data:
#     SPECIAL_KEY: here
# - name: app-configfile
#   data:
#     test.ini: |
#       [test]
#       value=1

envFrom:
- secretRef:
    name: authentik-secrets
- configMapRef:
    name: authentik-config

env: []
# - name: SPECIAL_KEY
#   valueFrom:
#     configMapKeyRef:
#       name: app-otherenv
#       key: SPECIAL_KEY

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  ports:
  - name: http
    port: 9000
  - name: https
    port: 9443
  - name: metrics
    port: 9300

persistentVolumes: []
# - name: media
#   mountPath: /usr/share/nginx/html/data
#   size: 1Gi
#   persistentVolumeClaim:
#     name: media
#     storageClass: mayastor-nvme
# - name: config
#   mountPath: /config
#   configMap:
#     name: app-configfile
#     items:
#     - key: test.ini
#       path: config.ini
# - name: keys
#   mountPath: /keys
#   readOnly: true
#   secret:
#     secretName: app-keyfile

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: cloudflare
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-signin: https://auth.mcswain.dev/oauth2/start?rd=$scheme://$http_host$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: https://auth.mcswain.dev/oauth2/auth
  hosts:
  - host: authentik.mcswain.dev
    paths:
    - port: 9000
      path: /
      pathType: Prefix
  tls:
  - secretName: authentik-mcswain-dev-tls
    hosts:
      - authentik.mcswain.dev

extraContainers:
- image: ghcr.io/goauthentik/server:2023.8.3@sha256:ffa8559564c3d11c549d385ee231a4ce8dfa92abb37f50ce9df26105f023a077
  imagePullPolicy: IfNotPresent
  name: worker
  args:
  - worker
  envFrom:
  - configMapRef:
      name: authentik-config
  - secretRef:
      name: authentik-secrets
  resources:
    limits:
      cpu: 100m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 128Mi

probes:
  liveness:
    httpGet:
      path: /
      port: 9000
  readiness:
    httpGet:
      path: /
      port: 9000

resources:
  limits:
    cpu: 100m
    memory: 256Mi
  requests:
    cpu: 10m
    memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}

lifecycle: {}
  # postStart:
  #   exec:
  #     command:
  #       - /bin/sh
  #       - -c
  #       - cp /tmp/file /var/app/file
